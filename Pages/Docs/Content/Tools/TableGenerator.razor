@layout DocumentationLayout
@using Pdf_Acc_Toolset.Services.UI;
@page "/docs/tools/table"
@page "/docs/tools/tablegenerator"
@page "/docs/tools/table-generator"
@page "/docs/tools/table_generator"

<h1 id="tableGen">Table Generator</h1>

<p>This tool lets you create a table with all the required elements. You must enter the amount of rows and columns that you want generated. The first row will automatically contain header cells. You can optionally enter a title.</p>

<p>Since this is just a tagging operation, you will still need to assign content to the table in a PDF editor.</p>

<h2 id="parameters">Parameters</h2>

<div>
    <table>
        <tr>
            <th>Parameter</th>
            <th>Purpose</th>
        </tr>
        <tr>
            <td>Title <b>(Optional)</b></td>
            <td>The title of the parent Table tag. Used by the remediator for identification.</td>
        </tr>
        <tr>
            <td>Column Amount</td>
            <td>The amount of columns to generate. This determines the amount of Table Data Cells (TD) per row.</td>
        </tr>
        <tr>
            <td>Row Amount</td>
            <td>The amount of rows to generate.</td>
        </tr>
    </table>
</div>

<h2 id="output">Output</h2>

<p>
    Output with a title of "Example", 20 rows, and 4 columns.
</p>

<img src="/img/docs/tableExample.png" alt="Generated table. Contains a parent table tag and twenty rows each with 4 columns. The first row contains header cells. The title is 'example title'" title="Output of the table tool">

@code {
    protected override void OnInitialized()
    {
        // Make a new list of toc items
        List<TocItem> list = new List<TocItem>();
        // Set the items
        list.Add(new TocItem("tableGen", 1, "Table Generator"));
        list.Add(new TocItem("parameters", 2, "Parameters"));
        list.Add(new TocItem("output", 2, "Output"));
        // Send to TOC service
        TocService.SetToc(list);
        base.OnInitialized();
    }
}
