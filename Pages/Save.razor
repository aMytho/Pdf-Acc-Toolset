@using Pdf_Acc_Toolset.Services;
@using Pdf_Acc_Toolset.Services.Pdf;
@using Pdf_Acc_Toolset.Services.Util;
@using Pdf_Acc_Toolset.Pages.Tasks;
@inject IJSRuntime JSRuntime;
@inject NavigationManager Navigation;
@page "/export";

<h2 class="text-4xl font-bold">Review and Export</h2>

<p class="text-lg">
    Saving your PDF will start a download for the output file.
    The "download" is how the Toolset exports the PDF.
    The PDF never leaves your device.
    You can choose to run the remaining tasks or just export the file.
</p>

<hr class="w-11/12 text-center m-4">
<h3 class="text-xl">PDF Summary</h3>

@if (PdfManager.pdfDownloadable) {
<h4 class="text-lg">Tasks</h4>
<p>A low-opacity task represents a task that is in the queue, but has not yet been ran.</p>


<div class="flex flex-col h-full w-1/2">
    @{taskIndex = 0;}
    @foreach (AccessibilityTask task in tasks)
    {
        // Keep track of input
        int loopIndex = taskIndex;
        if (task.TaskComplete) {
            // Render task
            <IndividualTask task="task" addControls="false"/>
        } else {
            // Render task with color shade
            <div class="opacity-60" title="In Queue">
                <div>
                    <IndividualTask task="task" addControls="false"/>
                </div>
            </div>
        }
        // Increase index for the next item
        taskIndex++;
    }
</div>

@if (tasks.Count == 0) {
    <p class="my-8 ml-2 text-red-500 text-lg">No tasks have been ran on this PDF.</p>
}

<div class="flex gap-4 flex-wrap">
    <div>
        <h4 class="text-lg">PDF Info</h4>
        <table class="border-collapse border border-slate-500 table-auto">
            <thead>
                <tr>
                    <th class="border border-slate-700 p-2">Metadata</th>
                    <th class="border border-slate-700 p-2">Value</th>
                </tr>
            </thead>
            <tr>
                <td class="border border-slate-700 p-2">Filename</td>
                <td class="border border-slate-700 p-2">@info.filename</td>
            </tr>
            <tr>
                <td class="border border-slate-700 p-2">Title</td>
                <td class="border border-slate-700 p-2">@info.title</td>
            </tr>
            <tr>
                <td class="border border-slate-700 p-2">Language</td>
                <td class="border border-slate-700 p-2">@info.lang</td>
            </tr>
            <tr>
                <td class="border border-slate-700 p-2">Standard</td>
                <td class="border border-slate-700 p-2">@info.standard</td>
            </tr>
        </table>
    </div>

    <div>
        <h4 class="text-lg">Task Info</h4>
        <table class="border-collapse border border-slate-500 table-auto">
            <tr>
                <th class="border border-slate-700 p-2">Task State</th>
                <th class="border border-slate-700 p-2">Value</th>
            </tr>
            <tr>
                <td class="border border-slate-700 p-2">Uncompleted Tasks</td>
                <td class="border border-slate-700 p-2">@info.tasksInQueue</td>
            </tr>
            <tr>
                <td class="border border-slate-700 p-2">Completed Tasks</td>
                <td class="border border-slate-700 p-2">@info.tasksRan</td>
            </tr>
        </table>
    </div>
    <div>
        <h4 class="text-lg">Miscellaneous</h4>
        <table class="border-collapse border border-slate-500 table-auto">
            <tr>
                <th class="border border-slate-700 p-2">Key</th>
                <th class="border border-slate-700 p-2">Value</th>
            </tr>
            <tr>
                <td class="border border-slate-700 p-2">PDF Version</td>
                <td class="border border-slate-700 p-2">@info.version</td>
            </tr>
            <tr>
                <td class="border border-slate-700 p-2">Page Count</td>
                <td class="border border-slate-700 p-2">@info.pageCount</td>
            </tr>
        </table>
    </div>
</div>
    <hr class="w-11/12 text-center m-4">

    <div class="flex space-x-4 mt-2 flex-row">
        <button @onclick="RunQueueAndSavePdf" class="p-2 bg-emerald-700 hover:bg-emerald-600 font-bold rounded-lg">Run Queue and Export</button>
        <button @onclick="SavePdf" class="p-2 bg-emerald-700 hover:bg-emerald-600 font-bold rounded-lg">Export PDF</button>
    </div>
} else {
    <p class="text-lg text-red-500">You must import a PDF to view this page. When a PDF is imported the metadata and changes will be displayed.</p>
}



@code {
    private PdfInfo info = new();

    private int taskIndex;

    public List<AccessibilityTask> tasks = new();
    protected override void OnInitialized()
    {
        // Get the tasks in the queue
        tasks = TaskManager.GetAccessibilityTasks();

        // Get the PDF info
        info.lang = PdfMetadata.GetLang();
        info.title = PdfMetadata.GetTitle();
        info.standard = PdfMetadata.GetPdfStandard();
        info.version = PdfMetadata.GetPdfVersion();
        info.pageCount = PdfMetadata.GetPageCount();
        info.tasksRan = TaskManager.GetTasksRanCounter();
        info.tasksInQueue = TaskManager.GetTasksInQueue().Count();
        info.filename = PdfManager.filename;

        // Correct any blank or invalid fields
        info = AddPdfInfoDefaults(info);
    }

    private PdfInfo AddPdfInfoDefaults(PdfInfo info)
    {
        if (info.title == null || info.title.Length == 0) {
            info.title = "None";
        }

        if (info.standard == null || info.standard.Length == 0) {
            info.standard = "None";
        }
        
        if (info.lang == null || info.lang.Length == 0) {
            info.lang = "None";
        }
        Console.WriteLine(info);

        return info;
    }

    private struct PdfInfo {
        public string filename;
        public string version;
        public string title;
        public string standard;
        public string lang;
        public int tasksRan;
        public int tasksInQueue;
        public int pageCount;
    }

    private async void SavePdf()
    {
        // If the user already downloaded the PDF, stop them from trying again
        if (PdfManager.hasDownloaded) {
            NotificationUtil.Inform(
                NotificationType.Error, "You cannot download a PDF once it has been saved."
            );
            return;
        }
        
        // Save the PDF
        PdfManager.Save();
        Console.WriteLine("Saving the PDF");
        // Download the PDF
        await DownloadPdf();

        // Show the complete screen
        Navigation.NavigateTo("/complete");
    }

    private void RunQueueAndSavePdf()
    {
        if (!PdfManager.hasDownloaded) {
            // Run the queued tasks
            TaskManager.RunQueuedTasks();
            // Save the PDF
            SavePdf();
        } else {
            NotificationUtil.Inform(
                NotificationType.Error, "You cannot download a PDF once it has been saved."
            );
        }
    }

    private async Task DownloadPdf()
    {
        // Generate a file
        byte[] data = PdfManager.outFile.ToArray();
        Console.WriteLine("Exporting PDF...");
        // Send the data to JS to actually download the file
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", CorrectFilename(PdfManager.filename), "application/octet-stream", data);
        NotificationUtil.Inform(NotificationType.Success, "Starting Export...");

        // Reset all PDF data
        PdfManager.Close();
        // Remove any tasks
        TaskManager.RemoveTasks();
    }

    // Handle bad filenames
    private string CorrectFilename(string filename) {
        // No file name
        if (filename == null) {
            return "Default_Name.pdf";
        }

        // No file extension
        if (!filename.EndsWith(".pdf")) {
            return filename + ".pdf";
        }

        // Good user, good boy!
        return filename;
    }
}
