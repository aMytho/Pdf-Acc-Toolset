@* Copyright (C) Jonathan Shull - See license file at github.com/amytho/pdf-acc-toolset *@
@using Pdf_Acc_Toolset.Services;
@using Pdf_Acc_Toolset.Services.Tools;
@using Pdf_Acc_Toolset.Services.Tools.Canvas;
@using Pdf_Acc_Toolset.Services.Util;
@using Pdf_Acc_Toolset.Pages.Selection;
@using System.ComponentModel.DataAnnotations;
@using iText.Kernel.Pdf.Tagutils;
@using iText.Kernel.Colors;

<h3 class="text-xl font-semibold">Color Replacer</h3>

<p class="text-lg">
    Find a given color of text or path and replace it. This is primarily used to fix color contrast issues.
    See Documentation for more information.
</p>

<p class="text-lg mt-4">This tool requires an <em>exact</em> match. Make sure to use a color picker that retrieves the "true" color, not the color on your screen. It may be helpful to use a tool like <a title="Inspect the exact color of a PDF" href="https://github.com/itext/i7j-rups" target="_blank">iText Rups</a> to inspect the colors. This tool only modifies the fill color, not the stroke color.</p>

<EditForm Model="@model" OnSubmit="@Submit" class="text-lg mt-4">
    <DataAnnotationsValidator />
    <div class="flex flex-wrap flex-col md:flex-row justify-around px-8 md:space-x-4 space-y-4 md:space-y-0">
        <div>
            <label for="colorCategory">Color Category:</label>
            <select class="bg-gray-800 rounded-md p-2 text-green-400" name="colorCategory" id="colorCategory">
                <option value="fill">Fill</option>
                <option value="stroke">Stroke</option>
            </select>
        </div>
        <div class="cursor-not-allowed">
            <label for="targetColor">Target Color (will be replaced):</label>
            <input type="color" id="targetColor" class="bg-gray-800 rounded-md p-2 text-green-400" disabled />
        </div>
        <div>
            <label for="replaceColor">Replacement Color: </label>
            <input type="color" id="replaceColor" class="bg-gray-800 rounded-md p-2 text-green-400" @bind="model.replaceColor" />
        </div>
    </div>

    @* Request the selection to insert into *@
    <div class="hidden">
        <Selection OnSelectionChanged="OnSelectionUpdated" />
    </div>

    <div class="flex flex-wrap w-full mt-4 space-x-2">
        <button type="button" class="grow bg-rose-800 hover:bg-rose-700 rounded-lg py-4 cursor-pointer" @onclick="Reset">Reset</button>
        <input class="grow bg-cyan-700 hover:bg-cyan-600 rounded-lg py-4 cursor-pointer" type="submit" value="Add Task" />
    </div>
</EditForm>

@if (!colorsLoaded) {
<div>
    Loading document colors...
</div>
} else {
<p class="mt-4">
    Select a color to replace. These colors may differ very slightly compared to the source document.
</p>

<div class="flex w-full mx-2 gap-x-4 justify-around mt-4" id="existingColors">
    <div>
        <h4 class="text-lg text-center font-semibold">Fill Colors</h4>
        <Pdf_Acc_Toolset.Pages.Tools.helpers.PdfColor Colors="documentFillColors" OnColorSelected="OnColorSelected"/>
    </div>
    <div>
        <h4 class="text-lg text-center font-semibold">Stroke Colors</h4>
        <Pdf_Acc_Toolset.Pages.Tools.helpers.PdfColor Colors="documentStrokeColors" OnColorSelected="OnColorSelected"/>
    </div>
</div>
}

@code {
    [Parameter]
    public EventCallback OnTaskAdded { get; set; }
    private ColorModel model { get; set; }

    private List<Color> documentFillColors = new ();
    private List<Color> documentStrokeColors = new ();
    private bool colorsLoaded = false;

    private Selection.SelectionModel SelectionModel { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        this.model = new();
        await this.DisplayExistingColors();
        this.colorsLoaded = true;
    }


    private void Reset()
    {
        model.findColor = new();
        model.replaceColor = "#ffffff";
    }


    private void CheckForMatch()
    {
        SelectionValidator.CheckSelectionMatches(SelectionModel);
    }


    private void OnSelectionUpdated(Selection.SelectionModel selectionModel)
    {
        SelectionModel = selectionModel;
    }


    private void Submit()
    {
        Color replace = GetColorFromInput(model.replaceColor);

        // Create selection class from model
        TagTreePointer pointer = PdfManager.GetTagRoot();
        Pdf_Acc_Toolset.Services.Tools.Selection.Selection selection = SelectionValidator.CreateSelection(SelectionModel, pointer);
        if (selection == null) {
            return;
        }

        // Create the task
        Services.Tools.ColorReplacer replacer = new(
            PdfManager.GetDocument(), selection, model.findColor, replace
        );
        // Add the task to the queue
        TaskManager.AddTask(replacer);

        // Close the tool window
        OnTaskAdded.InvokeAsync();
    }

    private Color GetColorFromInput(string input)
    {
        var color = System.Drawing.ColorTranslator.FromHtml(input);
        return new DeviceRgb(color.R, color.G, color.B);
    }

    private DeviceRgb GetColorFromInput(float[] input)
    {
        return new DeviceRgb(input[0], input[1], input[2]);
    }

    private async Task DisplayExistingColors()
    {
        await Task.Run(() => {
            // Search for all colors
            PdfColorFinder finder = new();
            finder.Find(PdfManager.GetDocument().GetPdfDocument());

            // Retrieve them
            documentFillColors = finder.GetFillColors();
            documentStrokeColors = finder.GetStrokeColors();
        });
    }

    private void OnColorSelected(float[] rgb)
    {
        NotificationUtil.Inform(NotificationType.Info, $"Selected RGB({rgb[0]}, {rgb[1]}, {rgb[2]})");
        model.findColor = GetColorFromInput(rgb);
    }


    public class ColorModel
    {
        public DeviceRgb findColor { get; set; }
        public string replaceColor { get; set; } = "#ffffff";
    }
}
