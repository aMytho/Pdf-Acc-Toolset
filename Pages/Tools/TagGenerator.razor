@using Pdf_Acc_Toolset.Services;
@using Pdf_Acc_Toolset.Services.Tools;
@using Pdf_Acc_Toolset.Pages.Selection;
@using System.ComponentModel.DataAnnotations;

<h3 class="text-xl font-semibold">Tag Generator</h3>

<p class="text-lg">
    Generate a tag using the options below. You must generate at least 1 tag.
    This tool only generates the parent tag. It does <b>Not</b> generate any child tags which are required for that element.
    For example, generating a list does not generate a list item body and label.
    If group title is enabled, tags will be inserted at the beginning of the document within a div tag with the title you selected.
    See Tag Documentation for more information.
</p>

<EditForm Model="@Model" OnSubmit="@Submit" class="text-lg">
    <DataAnnotationsValidator />
    <div class="flex flex-wrap flex-col md:flex-row justify-between px-8 md:space-x-4 space-y-4 md:space-y-0">
        <div>
            <label for="title">Group Title: </label>
            <InputText id="title" class="bg-gray-800 rounded-md p-2 text-green-400" @bind-Value="Model.groupTitle" />
        </div>
        <div>
            <label for="amnt">Tag Amount: </label>
            <InputNumber id="amnt" class="bg-gray-800 rounded-md p-2 text-green-400" @bind-Value="Model.amountOfItems"
                min="1" max="999" />
        </div>
        <div>
            <label for="tagType">Tag Type:</label>
            <select @bind="Model.tagType" id="tagType"
                class="bg-gray-800 rounded-md p-2 text-green-400 h-full">
                <option value="-1" selected>None (Default)</option>
                @foreach (var tag in Enum.GetValues(typeof(Services.Util.TagType)))
                {
                    <option value="@tag">@tag</option>
                }
            </select>
        </div>
    </div>

    @* Request the selection to insert into *@
    <div>
        <Selection OnSelectionChanged="OnSelectionUpdated" />
    </div>

    <div class="flex flex-wrap w-full mt-4 space-x-2">
        <button type="button" class="grow bg-rose-800 hover:bg-rose-700 rounded-lg py-4 cursor-pointer" @onclick="Reset">Reset</button>
        <button type="button" class="grow bg-sky-800 hover:bg-sky-700 rounded-lg py-4 cursor-pointer" @onclick="CheckForMatch">Check Matches</button>
        <input class="grow bg-cyan-700 hover:bg-cyan-600 rounded-lg py-4 cursor-pointer" type="submit" value="Add Task" />
    </div>
</EditForm>

@code {
    [Parameter]
    public EventCallback OnTaskAdded { get; set; }
    private TagGenModel Model { get; set; }
    private Selection.SelectionModel SelectionModel { get; set; } = new();
    protected override void OnInitialized()
    {
        this.Model = new();
        this.Model.amountOfItems = 5;
        base.OnInitialized();
    }

    public void Reset()
    {
        Model.groupTitle = "";
        // Set null tag
        Model.tagType = (Services.Util.TagType)(-1);
        Model.amountOfItems = 5;
    }

    private void CheckForMatch()
    {
        SelectionValidator.CheckSelectionMatches(SelectionModel);
    }


    private void OnSelectionUpdated(Selection.SelectionModel selectionModel)
    {
        SelectionModel = selectionModel;
    }

    public void Submit()
    {
        // Validate selection
        if (!SelectionValidator.Validate(SelectionModel)) {
            return;
        }

        // Create selection class from model
        iText.Kernel.Pdf.Tagutils.TagTreePointer pointer = PdfManager.GetTagRoot();
        Pdf_Acc_Toolset.Services.Tools.Selection.Selection selection = SelectionValidator.CreateSelection(SelectionModel, pointer);
        if (selection == null) {
            return;
        }

        // Create the task
        TagGeneration generation = new(
            PdfManager.GetDocument(), selection, Model.groupTitle, Model.tagType, Model.amountOfItems
        );
        // Add the task to the queue
        TaskManager.AddTask(generation);

        // Close tool window
        OnTaskAdded.InvokeAsync();
    }

    public class TagGenModel
    {
        public string groupTitle { get; set; }

        [Range(1, 999, ErrorMessage = "Amount must be greater than 0")]
        public int amountOfItems { get; set; }

        public Services.Util.TagType tagType { get; set; }
    }
}