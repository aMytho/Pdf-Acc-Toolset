@* Copyright (C) Jonathan Shull - See license file at github.com/amytho/pdf-acc-toolset *@
@using Pdf_Acc_Toolset.Services
@using Pdf_Acc_Toolset.Services.Tools
@using Pdf_Acc_Toolset.Pages.Selection

<h3 class="text-xl font-semibold">Attribute Modifier</h3>

<p class="text-lg mb-2">
    Modify the attributes on a given selection of tags. You can modify the actual text, alt text, and ID. Add will add the attribute if it doesn't exist. Edit will override any existing attribute or add one if it doesn't exist. Delete removes an attribute.
</p>

<EditForm Model="@model" OnSubmit="@Submit" class="text-lg mt-4">
    <DataAnnotationsValidator />
    <div class="flex flex-wrap flex-col md:flex-row justify-between px-8 md:space-x-4 space-y-4 md:space-y-0">
        <div>
            <label for="attribute">Attribute</label>
            <select @bind="model.Attr" id="attribute"
                class="bg-gray-800 rounded-md p-2 text-green-400 h-full">
                @foreach (var attr in Enum.GetValues(typeof(Services.Tools.Selection.Attribute)))
                {
                    <option value="@attr">@attr</option>
                }
            </select>
        </div>
        <div>
            <label for="action">Action</label>
            <select @bind="model.Action" id="action"
                class="bg-gray-800 rounded-md p-2 text-green-400 h-full">
                @foreach (var attr in Enum.GetValues(typeof(AttributeAction)))
                {
                    <option value="@attr">@attr</option>
                }
            </select>
        </div>
        <div>
            <!--Only show the value input if we are not removing an attribut -->
            @if (model.Action != AttributeAction.Remove) {
                <label for="value">Value</label>
                <InputText id="value" class="bg-gray-800 rounded-md p-2 text-green-400" @bind-Value="model.Value" />
            }
        </div>
    </div>

    @* Request the selection to insert into *@
    <div>
        <Selection OnSelectionChanged="OnSelectionUpdated" />
    </div>

    <div class="flex flex-wrap w-full mt-4 space-x-2">
        <button type="button" class="grow bg-rose-800 hover:bg-rose-700 rounded-lg py-4 cursor-pointer" @onclick="Reset">Reset</button>
        <button type="button" class="grow bg-sky-800 hover:bg-sky-700 rounded-lg py-4 cursor-pointer" @onclick="CheckForMatch">Check Matches</button>
        <input class="grow bg-cyan-700 hover:bg-cyan-600 rounded-lg py-4 cursor-pointer" type="submit" value="Add Task" />
    </div>
</EditForm>

@code {
    [Parameter]
    public EventCallback OnTaskAdded { get; set; }

    private AttributeModifierModel model { get; set; } = new();

    private Selection.SelectionModel selectionModel { get; set; } = new();

    private void OnSelectionUpdated(Selection.SelectionModel selectionModel)
    {
        this.selectionModel = selectionModel;
    }

    private void CheckForMatch()
    {
        SelectionValidator.CheckSelectionMatches(selectionModel);
    }

    private void Submit()
    {
        // Validate selection
        if (!SelectionValidator.Validate(selectionModel)) {
            return;
        }

        // Create selection class from model
        iText.Kernel.Pdf.Tagutils.TagTreePointer pointer = PdfManager.GetTagRoot();
        Services.Tools.Selection.Selection selection = SelectionValidator.CreateSelection(selectionModel, pointer);
        if (selection == null) {
            return;
        }

        // Create the task
        Services.Tools.AttributeModifier generation = new(
            PdfManager.GetDocument(), selection, model.Attr, model.Action, model.Value
        );
        // Add the task to the queue
        TaskManager.AddTask(generation);

        // Close the tool window
        OnTaskAdded.InvokeAsync();
    }

    private void Reset()
    {
        model = new();
    }

    private class AttributeModifierModel
    {
        public Services.Tools.Selection.Attribute Attr = Services.Tools.Selection.Attribute.Title;

        public AttributeAction Action = AttributeAction.Add;

        public string Value = "";
    }
}