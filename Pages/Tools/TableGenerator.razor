@using Pdf_Acc_Toolset.Services;
@using Pdf_Acc_Toolset.Services.Tools;
@using Pdf_Acc_Toolset.Pages.Selection;
@using System.ComponentModel.DataAnnotations;

<h3 class="text-xl font-semibold">Table Generator</h3>

<p class="text-lg">
    Generate a table using the options below. You must generate at least 1 row.
    Enter the amount of rows and columns to be created. The first row will automatically be header cells.
    The title is for making the table easier to identify if you are inserting multiple tables.
    See Table Documentation for more information.
</p>

<EditForm Model="@Model" OnSubmit="@Submit" class="text-lg">
    <DataAnnotationsValidator />
    <div class="flex flex-wrap flex-col md:flex-row justify-between px-8 md:space-x-4 space-y-4 md:space-y-0">
        <div>
            <label for="title">Table Title: </label>
            <InputText id="title" class="bg-gray-800 rounded-md p-2 text-green-400" @bind-Value="Model.title" />
        </div>
        <div>
            <label for="amntRow">Row Amount: </label>
            <InputNumber id="amntRow" class="bg-gray-800 rounded-md p-2 text-green-400" @bind-Value="Model.amountOfRows"
                min="1" max="999" />
        </div>
        <div class="md:self-center">
            <label for="amntCol">Column Amount: </label>
            <InputNumber id="amntCol" class="bg-gray-800 rounded-md p-2 text-green-400" @bind-Value="Model.amountOfColumns"
                min="1" max="999" />
        </div>
    </div>

    @* Request the selection to insert into *@
    <div>
        <Selection OnSelectionChanged="OnSelectionUpdated" />
    </div>

    <div class="flex flex-wrap w-full mt-4 space-x-2">
        <button type="button" class="grow bg-rose-800 hover:bg-rose-700 rounded-lg py-4 cursor-pointer" @onclick="Reset">Reset</button>
        <button type="button" class="grow bg-sky-800 hover:bg-sky-700 rounded-lg py-4 cursor-pointer" @onclick="CheckForMatch">Check Matches</button>
        <input class="grow bg-cyan-700 hover:bg-cyan-600 rounded-lg py-4 cursor-pointer" type="submit" value="Add Task" />
    </div>
</EditForm>

@code {
    [Parameter]
    public EventCallback OnTaskAdded { get; set; }
    private TableGenModel Model { get; set; }

    private Selection.SelectionModel SelectionModel { get; set; } = new();
    protected override void OnInitialized()
    {
        this.Model = new();
        base.OnInitialized();
    }

    public void Reset()
    {
        Model.title = "";
        Model.amountOfColumns = 3;
        Model.amountOfRows = 1;
    }

    private void CheckForMatch()
    {
        SelectionValidator.CheckSelectionMatches(SelectionModel);
    }


    private void OnSelectionUpdated(Selection.SelectionModel selectionModel)
    {
        SelectionModel = selectionModel;
    }

    public void Submit()
    {

        // Validate selection
        if (!SelectionValidator.Validate(SelectionModel)) {
            return;
        }

        // Create selection class from model
        iText.Kernel.Pdf.Tagutils.TagTreePointer pointer = PdfManager.GetTagRoot();
        Pdf_Acc_Toolset.Services.Tools.Selection.Selection selection = SelectionValidator.CreateSelection(SelectionModel, pointer);
        if (selection == null) {
            return;
        }

        // Create the task
        TableGeneration generation = new(
            PdfManager.GetDocument(), selection, Model.title, Model.amountOfRows, Model.amountOfColumns
        );
        // Add the task to the queue
        TaskManager.AddTask(generation);

        // Close the tool window
        OnTaskAdded.InvokeAsync();
    }

    public class TableGenModel
    {
        public string title { get; set; }

        [Range(1, 999, ErrorMessage = "Amount must be greater than 0")]
        public int amountOfRows { get; set; } = 1;

        [Range(1, 999, ErrorMessage = "Amount must be greater than 0")]
        public int amountOfColumns { get; set; } = 3;
    }
}
