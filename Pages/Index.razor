@using Pdf_Acc_Toolset.Pages.Tools;
@using Pdf_Acc_Toolset.Services;
@inject IToastService toastService;

@page "/"

<h1 class="text-6xl font-extrabold">PDF Acc Toolset</h1>

<p class="mt-4">Welcome to the Toolset! This app will help you with the remediation process of PDFs. Feel free to read
    our Documentation or experiment yourself.</p>
<p class="mt-2">We suggest you keep your original document in case you decide to revert changes.</p>

<hr class="w-11/12 text-center m-4" />

<div class="flex flex-wrap px-2 gap-2 space-x-0 lg:space-x-4">
    <div>
        <h2 class="text-4xl font-bold">File Selection</h2>
        <p>Select the Upload button to get started! The PDF never leaves your device.</p>
    </div>
    <form onsubmit="event.preventDefault()" class="grow">
        <InputFile id="inputFile" OnChange="@UploadFile" accept=".pdf" class="hidden">Upload</InputFile>
        <label for="inputFile" class="block border-solid bg-emerald-500 hover:bg-emerald-400 hover:bg-opacity-60 bg-opacity-60 border-2 border-emerald-500 p-4 w-full
                h-full rounded-lg text-lg cursor-pointer text-center">
            Upload PDF
        </label>
    </form>
</div>
@if (@showReimportWarning)
{
    <p class="text-red-500 m-2 font-bold">
        Uploading a new PDF will keep all tasks intact, but your existing PDF will not be saved!
    </p>
}


<!-- Show the import screen when a PDF is selected -->
<div>
    @if (showImport == true)
    {
        <ImportSettings OnImportConfirmed="OnImportSet" initialConfig="ConvertMetadataToImportDefault()" />
    }
</div>


@if (showToolbox == true)
{
    <!-- Put the toolbox in the center-->
    <h3 class="mt-2 text-2xl font-semibold">Toolbox</h3>
    <div class="mr-8 border border-solid border-green-400">
        <Toolbox OnToolSelected="OnToolSelected"></Toolbox>
    </div>
}

<!-- Tool window -->
<div class="mt-4 mx-2">
    @switch (activeTool)
    {
        case Tools.ListGen:
            <ListGenerator />
            break;
        case Tools.TableGen:
            <TableGenerator />
            break;
        case Tools.TagGen:
            <TagGenerator />
            break;
        case Tools.None:
            break;
        default:
            break;
    }
</div>


@code {
    public enum Tools { ListGen, TableGen, TagGen, Validation, None };
    public Tools activeTool = Tools.None;

    public bool showImport = false;
    public bool showToolbox = false;

    public bool showReimportWarning = false;

    public PdfImportConfig import;
    public MemoryStream ms;


    public void OnToolSelected(int tool)
    {
        // Set the active tool
        this.activeTool = (Tools)tool;
    }

    /// <summary>
    /// Requests an uploaded file and sends it to the PDF manager
    /// </summary>
    public async void UploadFile(InputFileChangeEventArgs e)
    {
        Console.WriteLine("Starting Upload...");
        // Validate the PDF, accept only 1, must be a pdf
        if (e.FileCount != 1 || !e.File.Name.EndsWith("pdf"))
        {
            toastService.ShowError("Upload Failed. Ensure that a single PDF was uploaded.");
            return;
        }

        Console.WriteLine("Validated successfully");
        // Open a stream for the file
        try {
            Console.WriteLine("The file is " + e.File.Size + " bytes.");
            ms = new MemoryStream(((int)e.File.Size));
            await e.File.OpenReadStream(e.File.Size).CopyToAsync(ms);
            ms.Position = 0;
        } catch (IOException)
        {
            toastService.ShowError("Upload Failed. Ensure that a valid PDF was uploaded");
            return;
        } catch (Exception)
        {
            toastService.ShowError("Unknown PDF upload error.");
            return;
        }


        // Send it to the PDF manager for processing
        // This ensures that the PDF can be accessed (no file permission issues, file corruption, etc.)
        var reader = PdfManager.SetInputFile(ms);
        // Handle failed reads
        if (!reader.success)
        {
            return;
        }

        Console.WriteLine("Import Reader Created");

        // Request metadata for the PDF. We pass this to the import component later
        this.import = PdfManager.GetMetadata(reader.Data);
        // Add the filename
        this.import.Filename = e.File.Name;

        // Request import settings from user
        this.showImport = true;
        StateHasChanged();
    }

    public void OnImportSet(ImportSettings.ImportSelection import)
    {
        toastService.ShowSuccess("Import Complete! You may begin the edit process.");

        // Move to the next section
        this.showImport = false;

        // based on the user settings, set the metadata for the output file
        this.import.Title = import.Title;
        this.import.Lang = import.Lang;
        this.import.Standard = import.Standard;
        this.import.Filename = import.Filename;

        Console.WriteLine("Saved import settings.");

        this.ms.Position = 0;
        // Set output
        PdfManager.SetOutputFile(this.ms, this.import);
        // Remove our local version from memory
        this.ms.Dispose();

        Console.WriteLine("Writable file is ready");

        // Show toolox
        this.showToolbox = true;
    }

    /// <summary>
    /// Returns an import selection from the metadata (type conversion)
    /// </summary>
    /// <returns></returns>
    private ImportSettings.ImportSelection ConvertMetadataToImportDefault()
    {
        return new ImportSettings.ImportSelection(this.import.Title, this.import.Lang, this.import.Standard,
        this.import.Filename);
    }

    protected override void OnInitialized()
    {
        // If the user navigated back to the toolbox, show the right page.
        if (PdfManager.outFile != null)
        {
            this.showImport = false;
            this.showToolbox = true;
            this.showReimportWarning = true;
        }
        base.OnInitialized();
    }
}