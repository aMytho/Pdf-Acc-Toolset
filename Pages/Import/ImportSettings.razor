@using System.ComponentModel.DataAnnotations;

<h3 class="text-2xl font-bold">Import Settings</h3>

<EditForm Model="@Model" OnSubmit="@SubmitNoChanges" Context="CurrentEditContext"
    class="flex flex-row justify-around text-lg mx-2 gap-x-8">
    <DataAnnotationsValidator />

    <div class="grid grid-cols-2 gap-y-2 basis-1/2">
        <label for="importFilename">File Name</label>
        <InputText @bind-Value="Model.Filename" type="text" id="importFilename"
            class="bg-gray-800 rounded-md p-2 text-green-400 ml-2 w-full" />
        <label for="importTitle">Title</label>
        <input @bind-value="Model.Title" type="text" id="importTitle"
            class="bg-gray-800 rounded-md p-2 text-green-400 ml-2 w-full" />
        <label for="importLang">Language</label>
        <select @bind="Model.Lang" id="importLang" class="bg-gray-800 rounded-md p-2 text-green-400 ml-2 w-full">
            <option value="en-US" selected>En-US</option>
        </select>
        <label for="importStandard">Standard</label>
        <select @bind="Model.Standard" id="importStandard"
            class="bg-gray-800 rounded-md p-2 text-green-400 ml-2 w-full">
            <option value="None" selected>None (Default)</option>
            <option value="UA">UA (Universal Accessibility)</option>
        </select>
    </div>

    <div class="basis-1/2 self-center mb-2">
        <p>
            Saving the changes will choose the current settings and overwrite the existing settings.
            Using existing values will not make any changes to the PDF.
        </p>

        <div class="flex flex-wrap mt-4 space-2">
            <button type="button" @onclick="() => Submit(false)" class="bg-red-800 hover:bg-red-700 rounded-lg p-2 grow m-1">Use
                Existing Values</button>
            <button type="button" disabled="@(!CurrentEditContext.Validate())" @onclick="() => Submit(true)"
                class="bg-emerald-800 hover:bg-emerald-700 rounded-lg p-2 grow m-1">Save
                Changes</button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public EventCallback<ImportSelection> OnImportConfirmed { get; set; }


    [Parameter]
    public ImportSelection initialConfig { get; set; }

    public ImportModel Model { get; set; }

    /// <summary>
    /// The import model
    /// </summary>
    public class ImportModel
    {
        public string Title { get; set; }

        public string Lang { get; set; }

        public string Standard { get; set; }

        [Required(ErrorMessage = "You must specify a file name")]
        public string Filename { get; set; }
    }

    public void Submit(bool useChanges = false)
    {
        if (useChanges)
        {
            // Use the changed values
            this.OnImportConfirmed.InvokeAsync(new ImportSelection(
            Model.Title, Model.Lang, Model.Standard, Model.Filename
            ));
        }
        else
        {
            // Use the initial values
            this.OnImportConfirmed.InvokeAsync(this.initialConfig);
        }
    }

    public void SubmitNoChanges()
    {
        this.Submit(false);
    }

    protected override void OnInitialized()
    {
        this.Model = new();

        // Set the values in the form from the imported PDF
        this.Model.Filename = initialConfig.Filename;
        this.Model.Title = initialConfig.Title ?? "";
        this.Model.Lang = initialConfig.Lang ?? "en-US";
        this.Model.Standard = initialConfig.Standard ?? "None";

        // Continue with blazor stuff
        base.OnInitialized();
    }

    public struct ImportSelection
    {
        public string Title;
        public string Lang;
        public string Standard;
        public string Filename;

        public ImportSelection(string Title, string Lang, string Standard, string Filename)
        {
            this.Title = Title;
            this.Lang = Lang;
            this.Standard = Standard;
            this.Filename = Filename;
        }
    }
}
