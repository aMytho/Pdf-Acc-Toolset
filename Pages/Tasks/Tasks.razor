@using Pdf_Acc_Toolset.Services;
@page "/tasks";

<h2 class="text-4xl font-bold">Tasks</h2>

<p class="text-lg">
    Below lists all of the tasks you have generated. Tasks will run in the order shown.
    You can also run a task individually. Tasks may be re-ordered if desired.
    If a task is no longer required, you can remove it from the queue.
    An incomplete task will not take effect until the file is saved!
</p>

<hr class="w-11/12 text-center m-4" />

<h3 class="text-xl">Task Queue</h3>

<p>Tasks will run from the top to the bottom.</p>
<div class="flex flex-col h-full">
    @{index = 0;}
    @foreach (AccessibilityTask task in tasks)
    {
        // Keep track of input
        int loopIndex = index;

        // Render task
        <IndividualTask task="task" addControls="true"
            OnRun="ev => RunTask(loopIndex)" OnDelete="ev => RemoveTask(loopIndex)"
            OnMove="direction => MoveTask(loopIndex, direction)"
        />
        
        // Increase index for the next item
        index++;
    }
</div>

@if (tasks.Count == 0) {
    <p class="italic my-8 ml-2">No tasks have been assigned. Create some from the <a title="Tools" href="/tools">Tools</a> page!</p>
}


@* Task Control section *@
<h3 class="text-xl">Task Controls</h3>

<button class="bg-cyan-800 hover:bg-cyan-700 p-4 m-2 rounded-lg cursor-pointer"
@onclick="RunAll">Run All</button>

<button class="bg-cyan-800 hover:bg-cyan-700 p-4 m-2 rounded-lg cursor-pointer"
@onclick="MarkAllComplete">Mark All Complete</button>

<button class="bg-cyan-800 hover:bg-cyan-700 p-4 m-2 rounded-lg cursor-pointer"
@onclick="MarkAllUncomplete">Mark All Uncomplete</button>

@code {
    // Stores a local reference to the tasks. Used to display them.
    // We don't modify the tasks with the local reference.
    public List<AccessibilityTask> tasks = new();

    private int index;
    protected override void OnInitialized()
    {
        this.tasks = TaskManager.GetAccessibilityTasks();
        base.OnInitialized();
    }

    private void RemoveTask(int index)
    {
        TaskManager.RemoveTask(index);
    }

    private void MoveTask(int toBeMoved, MoveTask direction)
    {
        TaskManager.MoveTask(toBeMoved, direction);
    }

    private void RunTask(int index) {
        TaskManager.RunTask(index);
    }

    private void RunAll() {
        TaskManager.RunQueuedTasks();
    }

    private void MarkAllComplete() {
        // Marks every task as completed
        for (int i = 0; i < this.tasks.Count; i++) {
            TaskManager.ModifyTaskStatus(i, true);
        }
    }

    private void MarkAllUncomplete() {
        // Marks every task as uncompleted. Tasks will probably be ran again by the user!
        for (int i = 0; i < this.tasks.Count; i++) {
            TaskManager.ModifyTaskStatus(i, false);
        }
    }
}
